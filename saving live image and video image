###SAVING AN LIVE IMAGE 
### importing OpenCV library
##import cv2
##cam = cv2.VideoCapture(0) #(1)-specified image
### reading the input using the camera
##result, image = cam.read()
##if result:
##    cv2.imshow("sample", image)
##    cv2.imwrite(r"C:\Users\Ibrahim Shaik\Pictures\Camera Roll\hiiii.jpg",image)
##    cv2.waitKey(0)
##    cv2.destroyWindow("sample")
##else:
##    print("No image detected. Please! try again")

#image taken when we press anykey

##import cv2
### 1.creating a video object
##video = cv2.VideoCapture(0,cv2.CAP_DSHOW) 
### 3. While loop
##while True:
##    # 4.Create a frame object
##    check, frame = video.read()  
##    # 5.show the frame!
##    cv2.imshow("Capturing",frame)
##    # 6.for playing 
##    key = cv2.waitKey(1)
##    if key == ord('q'):
##        break
### 7. image saving
##showPic = cv2.imwrite(r"C:\Users\Ibrahim Shaik\Pictures\Camera Roll\filename.jpg",frame)
##print(showPic)
### 8. shutdown the camera
##video.release()
##cv2.destroyAllWindows


import cv2 

# Trained XML classifiers describes some features of some
# object we want to detect a cascade function is trained
# from a lot of positive(faces) and negative(non-faces)
# images.
face_cascade = cv2.CascadeClassifier(r'C:\Users\Ibrahim Shaik\Downloads\haarcascade_frontalface_default.xml')
# /data/haarcascades/haarcascade_eye.xml
# Trained XML file for detecting eyes
eye_cascade = cv2.CascadeClassifier(r'C:\Users\Ibrahim Shaik\Downloads\haarcascade_eye.xml') 
  
# capture frames from a camera
cap = cv2.VideoCapture(0)
  
# loop runs if capturing has been initialized.
while 1: 
  
    # reads frames from a camera
    ret, img = cap.read() 
  
    # convert to gray scale of each frames
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  
    # Detects faces of different sizes in the input image
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
  
    for (x,y,w,h) in faces:
        # To draw a rectangle in a face 
        cv2.rectangle(img,(x,y),(x+w,y+h),(255,255,0),2) 
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]
  
        # Detects eyes of different sizes in the input image
        eyes = eye_cascade.detectMultiScale(roi_gray) 
  
        #To draw a rectangle in eyes
        for (ex,ey,ew,eh) in eyes:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,127,255),2)
  
    # Display an image in a window
    cv2.imshow('img',img)
  
    # Wait for Esc key to stop
    k = cv2.waitKey(30) & 0xff
    if k == 27:
        break
  
# Close the window
cap.release()

cv2.destroyAllWindows()
